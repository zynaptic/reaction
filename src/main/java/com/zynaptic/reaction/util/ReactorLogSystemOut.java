/*
 * Zynaptic Reaction - An asynchronous programming framework for Java.
 * 
 * Copyright (c) 2009-2019, Zynaptic Limited.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 * 
 * Please visit www.zynaptic.com or contact reaction@zynaptic.com if you need
 * additional information or have any questions.
 */

package com.zynaptic.reaction.util;

import java.util.MissingResourceException;
import java.util.TreeMap;
import java.util.logging.Level;

import com.zynaptic.reaction.Logger;

/**
 * Provides a basic log service which prints all log messages generated by the
 * reactor to the console.
 * 
 * @author Chris Holgate
 */
public final class ReactorLogSystemOut implements ReactorLogTarget {

  // Map used to store individual logger instances.
  private final TreeMap<String, Logger> loggerMap = new TreeMap<String, Logger>();

  /*
   * Implements ReactorLogTarget.getLogger(...)
   */
  public synchronized Logger getLogger(String loggerId, String loggerResources) throws MissingResourceException {

    // TODO: Localisation is not currently supported.
    if (loggerResources != null)
      throw new MissingResourceException("The basic console log target does not support localisation.", null,
          loggerResources);

    // Create new logger instances on request.
    Logger logger = loggerMap.get(loggerId);
    if (logger == null) {
      logger = new LoggerSystemOut(loggerId);
      loggerMap.put(loggerId, logger);
    }
    return logger;
  }

  /**
   * Provides a basic logger implementation which simply prints the required log
   * information to the console.
   */
  private final class LoggerSystemOut implements Logger {

    // Internal logger state.
    private final String loggerId;
    private Level logLevel;

    /**
     * Implements the default constructor which is used to assign the unique ID for
     * this logger instance.
     * 
     * @param loggerId This is the unique ID which is associated with the logger
     *   instance.
     */
    private LoggerSystemOut(String loggerId) {
      this.loggerId = loggerId;
      this.logLevel = Level.CONFIG;
    }

    /*
     * Implements Logger.log(...)
     */
    public synchronized void log(Level level, String message) {
      log(level, message, null);
    }

    /*
     * Implements Logger.log(...)
     */
    public synchronized void log(Level level, String message, Throwable exception) {
      if (level.intValue() >= logLevel.intValue()) {
        System.out.println("[" + loggerId + "] " + level + " : " + message);
        if (exception != null) {
          System.out.print("[" + loggerId + "] " + "THROWN : ");
          exception.printStackTrace(System.out);
        }
      }
    }

    /*
     * Implements Logger.getLoggerId()
     */
    public synchronized String getLoggerId() {
      return loggerId;
    }

    /*
     * Implements Logger.getLogLevel()
     */
    public synchronized Level getLogLevel() {
      return logLevel;
    }

    /*
     * Implements Logger.setLogLevel(...)
     */
    public synchronized void setLogLevel(Level logLevel) {
      this.logLevel = logLevel;
    }
  }
}