/*
 * Zynaptic Reaction - An asynchronous programming framework for Java.
 * 
 * Copyright (c) 2009-2019, Zynaptic Limited.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 * 
 * Please visit www.zynaptic.com or contact reaction@zynaptic.com if you need
 * additional information or have any questions.
 */

package com.zynaptic.reaction.util;

import java.util.MissingResourceException;
import java.util.TreeMap;
import java.util.logging.Level;

import com.zynaptic.reaction.Logger;

/**
 * Provides a basic log service which routes all log messages generated by the
 * reactor to the standard Java log service.
 * 
 * @author Chris Holgate
 */
public final class ReactorLogJavaStandard implements ReactorLogTarget {

  // Map used to store individual logger instances.
  private final TreeMap<String, LoggerJavaStandard> loggerMap = new TreeMap<String, LoggerJavaStandard>();

  /*
   * Implements ReactorLogTarget.getLogger(...)
   */
  public synchronized Logger getLogger(String loggerId, String loggerResources) throws MissingResourceException {
    LoggerJavaStandard logger = loggerMap.get(loggerId);

    // Create new logger if one is not already present.
    if (logger == null) {
      logger = new LoggerJavaStandard();
      loggerMap.put(loggerId, logger);
    }

    // Refresh the standard Java logger reference with the new parameters.
    logger.refreshJavaLogger(loggerId, loggerResources);
    return logger;
  }

  /**
   * Provides a basic logger implementation which simply routes the required log
   * information to the standard Java logger.
   */
  private final class LoggerJavaStandard implements Logger {

    // The wrapped standard Java logger component.
    private java.util.logging.Logger javaLogger;

    /*
     * Refreshes the reference to the standard Java logger, updating the logger
     * resources reference if required.
     */
    private synchronized void refreshJavaLogger(String loggerId, String loggerResources) {
      javaLogger = java.util.logging.Logger.getLogger(loggerId, loggerResources);
    }

    /*
     * Implements Logger.log(...)
     */
    public synchronized void log(Level level, String msg) {
      StackTraceElement callerContext = Thread.currentThread().getStackTrace()[2];
      javaLogger.logp(level, callerContext.getClassName(), callerContext.getMethodName(), msg);
    }

    /*
     * Implements Logger.log(...)
     */
    public synchronized void log(Level level, String msg, Throwable thrown) {
      StackTraceElement callerContext = Thread.currentThread().getStackTrace()[2];
      javaLogger.logp(level, callerContext.getClassName(), callerContext.getMethodName(), msg, thrown);
    }

    /*
     * Implements Logger.getLoggerId()
     */
    public synchronized String getLoggerId() {
      return javaLogger.getName();
    }

    /*
     * Implements Logger.getLogLevel()
     */
    public synchronized Level getLogLevel() {
      return javaLogger.getLevel();
    }

    /*
     * Implements Logger.setLogLevel(...)
     */
    public synchronized void setLogLevel(Level logLevel) {
      javaLogger.setLevel(logLevel);
    }
  }
}
