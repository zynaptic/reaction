/*
 * Zynaptic Reaction - An asynchronous programming framework for Java.
 * 
 * Copyright (c) 2009-2019, Zynaptic Limited.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 * 
 * Please visit www.zynaptic.com or contact reaction@zynaptic.com if you need
 * additional information or have any questions.
 */

package com.zynaptic.reaction;

/**
 * Defines the interface to a threadable task object. Threadable task objects
 * can be submitted to the reactor in order to run in a separate thread. This is
 * useful for executing code which contains blocking calls within the Reaction
 * framework. On submitting a threadable task object to the reactor using the
 * {@link Reactor#runThread(Threadable, Object) runThread} method on the
 * {@link Reactor} interface, an object implementing the {@link Deferred}
 * interface is returned which will be used to forward the results generated by
 * the {@link #run(Object) run} method on completion.
 * 
 * @param <T> This type parameter specifies the type of data object which may be
 *   passed into the threadable task.
 * @param <U> This type parameter specifies the type of data object which will
 *   be passed back by the threadable task on completion.
 * 
 * @author Chris Holgate
 */
public interface Threadable<T, U> {

  /**
   * Runs a threadable task in the context of a new thread. On submitting an
   * object implementing this interface for threaded execution, this method will
   * be called by the reactor in the context of a new thread. On normal completion
   * it will return a data object which will be passed as the callback parameter
   * to the deferred callback chain. Alternatively, if an exception is thrown this
   * will be passed as the errback parameter to the error callback chain.
   * 
   * @param data This is the input data object which is provided when submitting
   *   the threadable task object to the reactor.
   * @return Returns an output data object which will be passed to the deferred
   *   callback chain as the {@link Deferrable#onCallback(Deferred, Object)
   *   onCallback} parameter.
   * @throws Exception On an exception, the exception object is passed to the
   *   deferred error callback chain as the
   *   {@link Deferrable#onErrback(Deferred, Exception) onErrback} parameter.
   */
  public U run(T data) throws Exception;

}